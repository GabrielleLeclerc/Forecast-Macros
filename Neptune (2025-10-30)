Option Explicit
 
'========================= SETTINGS =========================
Private Const GATE_BY As String = "ENDING"          ' "ENDING" | "BEGINNING" | "EXISTING"
Private Const EPS_NEG As Double = 0                 ' Any value < EPS_NEG fails (0 = strictly negative fails)
Private Const IGNORE_MISSING_BOX_ROWS As Boolean = True
Private Const WRITE_DEBUG As Boolean = True
 
' Backlog settings
Private Const BACKLOG_ENABLED As Boolean = True
' LOCAL_ONLY = only local DC can clear backlog (partners do NOT touch backlog)
' ANY        = partners may also clear backlog (P1 then P2)
Private Const BACKLOG_FILL_MODE As String = "LOCAL_ONLY"
 
' Always write a row even if data looked odd
Private Const FORCE_WRITE_ROWS As Boolean = True
 
' How many boxes total?
Private Const MAX_BOX As Long = 12
 
' ---------- Per-sheet weekly column spans (letters) ----------
Private Const MTL_START_COL As String = "BN"
Private Const MTL_END_COL   As String = "EL"
Private Const TO_START_COL  As String = "BM"
Private Const TO_END_COL    As String = "EJ"
Private Const VAN_START_COL As String = "BN"
Private Const VAN_END_COL   As String = "EO"
Private Const IRN_START_COL As String = "BP"
Private Const IRN_END_COL   As String = "EU"
Private Const MOR_START_COL As String = "BP"
Private Const MOR_END_COL   As String = "EN"
 
' ---------- Core / Add-ons ----------
Private Function CoreGroup() As Variant
    CoreGroup = VBA.Array(1, 2, 3, 4, 5) ' core = 1..5
End Function
 
Private Function AddOnBoxes() As Variant
    Dim a() As Variant, b As Long, n As Long
    If MAX_BOX < 6 Then AddOnBoxes = VBA.Array(): Exit Function
    ReDim a(0 To MAX_BOX - 6)
    For b = 6 To MAX_BOX
        a(n) = b
        n = n + 1
    Next b
    AddOnBoxes = a
End Function
 
' ---------- Partner rules (priority order) ----------
Private Function PartnersFor(ByVal sheetName As String) As Variant
    Select Case sheetName
        Case "Neptune-Montreal":  PartnersFor = VBA.Array("Neptune-Toronto", "Neptune-Vancouver")
        Case "Neptune-Toronto":   PartnersFor = VBA.Array("Neptune-Montreal", "Neptune-Vancouver")
        Case "Neptune-Vancouver": PartnersFor = VBA.Array("Neptune-Montreal", "Neptune-Toronto")
        Case "Neptune-Ironlink":  PartnersFor = VBA.Array("Neptune-Moreno")
        Case "Neptune-Moreno":    PartnersFor = VBA.Array("Neptune-Ironlink")
        Case Else:                PartnersFor = VBA.Array()
    End Select
End Function
 
' Map sheet names to display cities
Private Function SheetCityName(ByVal sheetName As String) As String
    Select Case sheetName
        Case "Neptune-Montreal":  SheetCityName = "Montreal"
        Case "Neptune-Toronto":   SheetCityName = "Toronto"
        Case "Neptune-Vancouver": SheetCityName = "Vancouver"
        Case "Neptune-Ironlink":  SheetCityName = "Ironlink"
        Case "Neptune-Moreno":    SheetCityName = "Moreno"
        Case Else:                SheetCityName = sheetName
    End Select
End Function
'============================================================
 
'========================= SMALL HELPER ======================
Private Function ToRow2D(ByRef arr As Variant) As Variant
    Dim n As Long, i As Long
    n = UBound(arr) - LBound(arr) + 1
    Dim tmp() As Variant
    ReDim tmp(1 To 1, 1 To n)
    For i = 1 To n
        tmp(1, i) = arr(LBound(arr) + i - 1)
    Next i
    ToRow2D = tmp
End Function
'============================================================
 
'========================= ENTRY ============================
Public Sub BuildWeeklyBoxesShipped_ColsOnly()
    Const DBG_SHEET As String = "Boxes_Shipped_DEBUG"
 
    Dim dcSheets As Variant, dcNames As Variant
    dcSheets = VBA.Array("Neptune-Montreal", "Neptune-Toronto", "Neptune-Vancouver", "Neptune-Ironlink", "Neptune-Moreno")
    dcNames  = VBA.Array("Montreal", "Toronto", "Vancouver", "Ironlink", "Moreno")
 
    Dim wb As Workbook: Set wb = ActiveWorkbook
 
    ' ===== Speed up =====
    Dim prevCalc As XlCalculation, prevScr As Boolean, prevEvt As Boolean
    prevCalc = Application.Calculation
    prevScr = Application.ScreenUpdating
    prevEvt = Application.EnableEvents
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
 
    On Error GoTo cleanup
 
    ' ===== Prepare output sheet =====
    Dim wsDbg As Worksheet: Set wsDbg = EnsureOutputSheet(wb, DBG_SHEET)
 
    ' Preflight: normalize so writes don't get blocked
    On Error Resume Next
    If wsDbg.ProtectContents Then wsDbg.Unprotect ""
    If wsDbg.FilterMode Then wsDbg.ShowAllData
    If wsDbg.AutoFilterMode Then wsDbg.AutoFilterMode = False
    wsDbg.Cells.EntireRow.Hidden = False
    wsDbg.Cells.EntireColumn.Hidden = False
    wsDbg.Cells.UnMerge
    Do While wsDbg.ListObjects.Count > 0: wsDbg.ListObjects(1).Unlist: Loop
    On Error GoTo 0
 
    wsDbg.Cells.Clear
 
    ' Header
    Dim numCols As Long
    numCols = 8 + 2 * MAX_BOX + 11
 
    Dim hdr() As Variant, hdrIdx As Long, iCol As Long
    ReDim hdr(1 To numCols)
    hdr(1) = "Demand City": hdr(2) = "Color": hdr(3) = "Week Start": hdr(4) = "Week End"
    hdr(5) = "Col":  hdr(6) = "GateBy": hdr(7) = "LocalCorePass": hdr(8) = "Reason"
    hdrIdx = 8
    For iCol = 1 To MAX_BOX: hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "Raw B" & iCol: Next iCol
    For iCol = 1 To MAX_BOX: hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "EligLocal B" & iCol: Next iCol
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "SalesTotal"
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "FromLocal"
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "P1 City"
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "FromP1"
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "P2 City"
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "FromP2"
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "ToCityTotal"
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "OutOfCityTotal"
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "BacklogStart"
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "BacklogEnd"
    hdrIdx = hdrIdx + 1: hdr(hdrIdx) = "UnfilledThisWeek"
    wsDbg.Cells(1, 1).Resize(1, numCols).Value = ToRow2D(hdr)
 
    ' ===== Outbound aggregator (for OutOfCityTotal per row) =====
    Dim keys() As String, tot() As Double, cnt As Long, cap As Long
    cap = 256: cnt = 0
    ReDim keys(1 To cap)
    ReDim tot(1 To cap)
 
    ' Cache rows until we can fill OutOfCityTotal
    Dim rowCache As Collection: Set rowCache = New Collection
 
    ' ===== Iterate demand cities =====
    Dim iCity As Long
    For iCity = LBound(dcSheets) To UBound(dcSheets)
 
        Dim demandSheet As String: demandSheet = CStr(dcSheets(iCity))
        Dim demandCity  As String: demandCity  = CStr(dcNames(iCity))
        If Not SheetExistsInWB(wb, demandSheet) Then GoTo NextSheet
 
        Dim wsDC As Worksheet: Set wsDC = wb.Worksheets(demandSheet)
 
        ' Weekly span
        Dim cStart As Long, cEnd As Long
        GetFixedSpan demandSheet, cStart, cEnd
        If cStart <= 0 Or cEnd < cStart Then GoTo NextSheet
 
        ' Sections
        Dim salesTbl As Variant, gateTbl As Variant, begTbl As Variant
        salesTbl = BuildSectionTable_Block(wsDC, "Sales")
        begTbl   = BuildSectionTable_Block(wsDC, "Beginning Stock")
 
        Select Case UCase$(GATE_BY)
            Case "ENDING":    gateTbl = BuildSectionTable_Block(wsDC, "Ending Stock")
            Case "BEGINNING": gateTbl = begTbl
            Case "EXISTING":  gateTbl = BuildSectionTable_Block(wsDC, "Existing")
            Case Else:        gateTbl = BuildSectionTable_Block(wsDC, "Ending Stock")
        End Select
 
        ' Colors
        Dim colors As Collection: Set colors = UnionColors(salesTbl, gateTbl, begTbl)
        If colors Is Nothing Or colors.Count = 0 Then
            Set colors = New Collection
            colors.Add "ALL"
        End If
 
        ' Partners cache
        Dim partNames As Variant, hasPartners As Boolean, pLB As Long, pUB As Long
        partNames = PartnersFor(demandSheet)
        hasPartners = GetArrayBounds(partNames, pLB, pUB)
 
        Dim partners() As Worksheet, partnerGate() As Variant, p As Long
        If hasPartners Then
            ReDim partners(pLB To pUB)
            ReDim partnerGate(pLB To pUB)
            For p = pLB To pUB
                If SheetExistsInWB(wb, CStr(partNames(p))) Then
                    Set partners(p) = wb.Worksheets(CStr(partNames(p)))
                    Select Case UCase$(GATE_BY)
                        Case "ENDING":    partnerGate(p) = BuildSectionTable_Block(partners(p), "Ending Stock")
                        Case "BEGINNING": partnerGate(p) = BuildSectionTable_Block(partners(p), "Beginning Stock")
                        Case "EXISTING":  partnerGate(p) = BuildSectionTable_Block(partners(p), "Existing")
                    End Select
                End If
            Next p
        End If
 
        ' ===== Per-color backlog =====
        Dim clr As Variant
        For Each clr In colors
            Dim colorRaw As String: colorRaw = CStr(clr)
            Dim colorKey As String: colorKey = NormalizeColor(colorRaw)
            Dim back() As Double: ReDim back(1 To MAX_BOX)
 
            Dim c As Long
            For c = cStart To cEnd
 
                Dim wkStart As Date, wkEnd As Date
                Dim okStart As Boolean, okEnd As Boolean
                okStart = TryReadDate(wsDC.Cells(2, c).Value, wkStart)
                okEnd = TryReadDate(wsDC.Cells(4, c).Value, wkEnd)
 
                ' ---- Gather sales ----
                Dim raw() As Double, allowedLocal() As Boolean
                ReDim raw(1 To MAX_BOX)
                ReDim allowedLocal(1 To MAX_BOX)
 
                Dim b As Long, rr As Long, v As Double
                Dim salesTotal As Double, fromLocal As Double, fromP1 As Double, fromP2 As Double
                Dim backlogStart As Double, backlogEnd As Double
                Dim unfilledThisWeek As Double
 
                ' RESET per-week accumulators
                salesTotal = 0#: fromLocal = 0#: fromP1 = 0#: fromP2 = 0#
                backlogStart = 0#: backlogEnd = 0#: unfilledThisWeek = 0#
 
                For b = 1 To MAX_BOX
                    rr = RowForInTable(salesTbl, colorKey, b)
                    If rr = 0 And Not IsEmpty(salesTbl) And colorKey = "ALL" Then
                        rr = RowForInTable_AnyColor(salesTbl, b)
                    End If
                    If rr > 0 Then
                        v = ValD(wsDC.Cells(rr, c).Value)
                        If v > 0 Then raw(b) = v
                    End If
                    salesTotal = salesTotal + raw(b)
                    backlogStart = backlogStart + back(b)
                Next b
 
                ' ---- Local gate ----
                Dim corePass As Boolean, reason As String
                AllowedBoxesForDC_Single wsDC, gateTbl, colorKey, c, CoreGroup(), corePass, reason, allowedLocal
 
                ' -------- Partners (safe/guarded) --------
                Dim hasP1 As Boolean, p1Pass As Boolean, hasP2 As Boolean, p2Pass As Boolean
                Dim hasAllowedP1 As Boolean, hasAllowedP2 As Boolean
                Dim allowedP1() As Boolean, allowedP2() As Boolean
                Dim p1Name As String, p2Name As String
                p1Name = "": p2Name = ""
 
                If hasPartners Then
                    ' P1
                    If Not partners(pLB) Is Nothing Then
                        Dim p1Start As Long, p1End As Long, p1Col As Long, off1 As Long
                        p1Name = SheetCityName(partners(pLB).Name)
                        GetFixedSpan partners(pLB).Name, p1Start, p1End
                        off1 = c - cStart: p1Col = p1Start + off1
                        If p1Col >= p1Start And p1Col <= p1End Then
                            ReDim allowedP1(1 To MAX_BOX): hasAllowedP1 = True
                            Dim rz1 As String
                            AllowedBoxesForDC_Single partners(pLB), partnerGate(pLB), colorKey, p1Col, CoreGroup(), p1Pass, rz1, allowedP1
                            hasP1 = True
                        End If
                    End If
                    ' P2
                    If pUB >= pLB + 1 Then
                        If Not partners(pLB + 1) Is Nothing Then
                            Dim p2Start As Long, p2End As Long, p2Col As Long, off2 As Long
                            p2Name = SheetCityName(partners(pLB + 1).Name)
                            GetFixedSpan partners(pLB + 1).Name, p2Start, p2End
                            off2 = c - cStart: p2Col = p2Start + off2
                            If p2Col >= p2Start And p2Col <= p2End Then
                                ReDim allowedP2(1 To MAX_BOX): hasAllowedP2 = True
                                Dim rz2 As String
                                AllowedBoxesForDC_Single partners(pLB + 1), partnerGate(pLB + 1), colorKey, p2Col, CoreGroup(), p2Pass, rz2, allowedP2
                                hasP2 = True
                            End If
                        End If
                    End If
                End If
 
                ' ---- Ship per box ----
                Dim backlogPartnerOK As Boolean
                backlogPartnerOK = (UCase$(BACKLOG_FILL_MODE) = "ANY")
 
                For b = 1 To MAX_BOX
                    Dim shipL As Double, ship1 As Double, ship2 As Double
                    ' RESET per-box ship buckets
                    shipL = 0#: ship1 = 0#: ship2 = 0#
 
                    Dim dBack As Double: dBack = back(b)
                    Dim dNew As Double:  dNew = raw(b)
 
                    If allowedLocal(b) Then
                        shipL = dBack + dNew
                        dBack = 0#: dNew = 0#
                        If shipL > 0 Then UpdateOriginAgg keys, tot, cnt, cap, demandCity, demandCity, colorKey, IIf(okStart, wkStart, 0), IIf(okEnd, wkEnd, 0), shipL
                    Else
                        If hasP1 And p1Pass And hasAllowedP1 And allowedP1(b) Then
                            If backlogPartnerOK And dBack > 0 Then ship1 = ship1 + dBack: dBack = 0#
                            If dNew > 0 Then ship1 = ship1 + dNew: dNew = 0#
                            If ship1 > 0 Then UpdateOriginAgg keys, tot, cnt, cap, p1Name, demandCity, colorKey, IIf(okStart, wkStart, 0), IIf(okEnd, wkEnd, 0), ship1
                        End If
                        If (dBack > 0 Or dNew > 0) And hasP2 And p2Pass And hasAllowedP2 And allowedP2(b) Then
                            If backlogPartnerOK And dBack > 0 Then ship2 = ship2 + dBack: dBack = 0#
                            If dNew > 0 Then ship2 = ship2 + dNew: dNew = 0#
                            If ship2 > 0 Then UpdateOriginAgg keys, tot, cnt, cap, p2Name, demandCity, colorKey, IIf(okStart, wkStart, 0), IIf(okEnd, wkEnd, 0), ship2
                        End If
                    End If
 
                    back(b) = dBack + dNew
                    fromLocal = fromLocal + shipL
                    fromP1    = fromP1 + ship1
                    fromP2    = fromP2 + ship2
                Next b
 
                For b = 1 To MAX_BOX: backlogEnd = backlogEnd + back(b): Next b
                unfilledThisWeek = salesTotal - (fromLocal + fromP1 + fromP2)
 
                ' Build row now (OutOfCityTotal filled later)
                Dim rowArr() As Variant, idx2 As Long
                Dim outIdx As Long
                ReDim rowArr(1 To numCols)
                rowArr(1) = demandCity: rowArr(2) = colorRaw
                rowArr(3) = IIf(okStart, wkStart, wsDC.Cells(2, c).Value)
                rowArr(4) = IIf(okEnd, wkEnd, wsDC.Cells(4, c).Value)
                rowArr(5) = ColN2L(c):  rowArr(6) = UCase$(GATE_BY)
                rowArr(7) = corePass:   rowArr(8) = reason
                idx2 = 8
                For b = 1 To MAX_BOX: idx2 = idx2 + 1: rowArr(idx2) = raw(b):       Next b
                For b = 1 To MAX_BOX: idx2 = idx2 + 1: rowArr(idx2) = IIf(allowedLocal(b), raw(b), 0#): Next b
                idx2 = idx2 + 1: rowArr(idx2) = salesTotal
                idx2 = idx2 + 1: rowArr(idx2) = fromLocal
                idx2 = idx2 + 1: rowArr(idx2) = p1Name
                idx2 = idx2 + 1: rowArr(idx2) = fromP1
                idx2 = idx2 + 1: rowArr(idx2) = p2Name
                idx2 = idx2 + 1: rowArr(idx2) = fromP2
                idx2 = idx2 + 1: rowArr(idx2) = fromLocal + fromP1 + fromP2
 
                outIdx = 8 + 2 * MAX_BOX + 8   ' constant position of OutOfCityTotal
                idx2 = idx2 + 1: rowArr(idx2) = 0#                   ' placeholder OutOfCityTotal
                idx2 = idx2 + 1: rowArr(idx2) = backlogStart
                idx2 = idx2 + 1: rowArr(idx2) = backlogEnd
                idx2 = idx2 + 1: rowArr(idx2) = unfilledThisWeek
 
                rowCache.Add Array(rowArr, colorKey, outIdx)
            Next c
        Next clr
NextSheet:
    Next iCity
 
    ' ===== Write rows with OutOfCityTotal filled (BATCHED) =====
    Dim outRows As Long: outRows = rowCache.Count
    If outRows > 0 Then
        Dim out2D() As Variant
        ReDim out2D(1 To outRows, 1 To numCols)
 
        Dim it As Variant, outKey As String, idxFound As Long
        Dim rArr() As Variant, outColorKey As String, outIdx As Long
        Dim iRow As Long, j As Long
 
        iRow = 0
        For Each it In rowCache
            iRow = iRow + 1
            rArr = it(0)
            outColorKey = it(1)
            outIdx = it(2)
 
            outKey = MakeKey(CStr(rArr(1)), outColorKey, TryDateForKey(rArr(3)), TryDateForKey(rArr(4)))
            idxFound = FindKeyIndex(keys, cnt, outKey)
            rArr(outIdx) = IIf(idxFound > 0, tot(idxFound), 0#)
 
            For j = 1 To numCols
                out2D(iRow, j) = rArr(j)
            Next j
        Next it
 
        wsDbg.Cells(2, 1).Resize(outRows, numCols).Value = out2D
    End If
 
    ' Format
    With wsDbg
        .Columns("A:ZZ").AutoFit
        If outRows > 0 Then .Range("C2:D" & (outRows + 1)).NumberFormat = "yyyy-mm-dd"
    End With
 
    MsgBox "Done. Wrote " & outRows & " rows to '" & DBG_SHEET & "'.", vbInformation
 
cleanup:
    Application.Calculation = prevCalc
    Application.EnableEvents = prevEvt
    Application.ScreenUpdating = prevScr
End Sub
'============================================================
 
'======================= OUTBOUND AGG (for OutOfCityTotal) ===========================
Private Sub UpdateOriginAgg(ByRef keys() As String, ByRef tot() As Double, _
                            ByRef cnt As Long, ByRef cap As Long, _
                            ByVal originCity As String, ByVal demandCity As String, _
                            ByVal colorKey As String, ByVal wkStart As Variant, ByVal wkEnd As Variant, _
                            ByVal qty As Double)
    Dim ds As Date, de As Date
    ds = TryDateForKey(wkStart)
    de = TryDateForKey(wkEnd)
    Dim key As String
    key = MakeKey(originCity, colorKey, ds, de)
    Dim i As Long
    i = FindKeyIndex(keys, cnt, key)
    If i = 0 Then
        cnt = cnt + 1
        If cnt > cap Then
            cap = cap * 2
            ReDim Preserve keys(1 To cap)
            ReDim Preserve tot(1 To cap)
        End If
        i = cnt
        keys(i) = key
        tot(i) = 0#
    End If
    tot(i) = tot(i) + qty
End Sub
 
Private Function MakeKey(ByVal city As String, ByVal colorKey As String, ByVal wkStart As Date, ByVal wkEnd As Date) As String
    MakeKey = UCase$(Trim$(city)) & "|" & UCase$(Trim$(colorKey)) & "|" & _
              Format$(wkStart, "yyyy-mm-dd") & "|" & Format$(wkEnd, "yyyy-mm-dd")
End Function
 
Private Function FindKeyIndex(ByRef keys() As String, ByVal cnt As Long, ByVal key As String) As Long
    Dim i As Long
    For i = 1 To cnt
        If keys(i) = key Then FindKeyIndex = i: Exit Function
    Next i
    FindKeyIndex = 0
End Function
'=============================================================================
 
'======================= COMMON HELPERS ============================
Private Sub GetFixedSpan(ByVal sheetName As String, ByRef startCol As Long, ByRef endCol As Long)
    Dim sStart As String, sEnd As String
    Select Case sheetName
        Case "Neptune-Montreal":  sStart = MTL_START_COL: sEnd = MTL_END_COL
        Case "Neptune-Toronto":   sStart = TO_START_COL:  sEnd = TO_END_COL
        Case "Neptune-Vancouver": sStart = VAN_START_COL: sEnd = VAN_END_COL
        Case "Neptune-Ironlink":  sStart = IRN_START_COL: sEnd = IRN_END_COL
        Case "Neptune-Moreno":    sStart = MOR_START_COL: sEnd = MOR_END_COL
    End Select
    startCol = ColLetterToNumber(sStart)
    endCol   = ColLetterToNumber(sEnd)
End Sub
 
Private Function ColLetterToNumber(ByVal colLetters As String) As Long
    Dim s As String: s = UCase$(Trim$(colLetters))
    Dim i As Long, n As Long
    For i = 1 To Len(s)
        If Mid$(s, i, 1) < "A" Or Mid$(s, i, 1) > "Z" Then Exit For
        n = n * 26 + (Asc(Mid$(s, i, 1)) - Asc("A") + 1)
    Next i
    ColLetterToNumber = n
End Function
 
Private Function ColN2L(ByVal n As Long) As String
    Dim s As String, r As Long
    Do While n > 0
        r = (n - 1) Mod 26
        s = Chr$(Asc("A") + r) & s
        n = (n - 1) \ 26
    Loop
    ColN2L = s
End Function
 
Private Function EnsureOutputSheet(wb As Workbook, ByVal name As String) As Worksheet
    If SheetExistsInWB(wb, name) Then
        Set EnsureOutputSheet = wb.Worksheets(name)
    Else
        Set EnsureOutputSheet = wb.Worksheets.Add(After:=wb.Worksheets(wb.Worksheets.Count))
        EnsureOutputSheet.Name = name
    End If
End Function
 
Private Function SheetExistsInWB(wb As Workbook, ByVal name As String) As Boolean
    On Error Resume Next
    SheetExistsInWB = Not wb.Worksheets(name) Is Nothing
    On Error GoTo 0
End Function
 
Private Function NormalizeColor(ByVal s As String) As String
    Dim t As String
    t = CStr(s)
    t = Replace(t, Chr(160), " ")
    On Error Resume Next: t = Replace(t, ChrW(160), " "): On Error GoTo 0
    On Error Resume Next: t = WorksheetFunction.Trim(WorksheetFunction.Clean(t)): On Error GoTo 0
    NormalizeColor = UCase$(Trim$(t))
End Function
 
Private Function BuildSectionTable_Block(ws As Worksheet, ByVal sectionName As String) As Variant
    Dim lastRow As Long: lastRow = ws.Cells(ws.Rows.Count, "C").End(xlUp).Row
    Dim r As Long, rStart As Long, rEnd As Long
 
    For r = 1 To lastRow
        If UCase$(Trim$(CStr(ws.Cells(r, "C").Value))) = UCase$(sectionName) Then
            rStart = r + 1
            Exit For
        End If
    Next r
    If rStart = 0 Then BuildSectionTable_Block = Empty: Exit Function
 
    rEnd = lastRow
    For r = rStart To lastRow
        Dim hdr As String: hdr = UCase$(Trim$(CStr(ws.Cells(r, "C").Value)))
        If (hdr = "BEGINNING STOCK") Or (hdr = "ENDING STOCK") Or (hdr = "SALES") Or (hdr = "EXISTING") Or (hdr = "TO BE RECEIVED") Then
            If r > rStart Then rEnd = r - 1
            Exit For
        End If
    Next r
 
    Dim tmp() As Variant, cnt2 As Long: ReDim tmp(1 To 3, 1 To 1)
    Dim lastColorKey As String: lastColorKey = ""
 
    For r = rStart To rEnd
        Dim desc As String: desc = CStr(ws.Cells(r, "D").Value)
        Dim bx As Long: bx = ParseBoxNum(desc)
        If bx = 0 Then GoTo NextRow
 
        If bx = 8 Then
            Dim U8 As String: U8 = UCase$(desc)
            If (InStr(1, U8, "NEW") > 0) And (InStr(1, U8, "ARMS") > 0 Or InStr(1, U8, "SRMS") > 0) Then GoTo NextRow
        End If
 
        Dim colorRaw As String, colorKey As String
        colorRaw = CStr(ws.Cells(r, "E").Value)
        colorKey = ""
        If IsLikelyColor(colorRaw) Then colorKey = NormalizeColor(colorRaw)
        If Len(colorKey) = 0 And Len(lastColorKey) > 0 Then colorKey = lastColorKey
        If Len(colorKey) = 0 Then GoTo NextRow
        lastColorKey = colorKey
 
        cnt2 = cnt2 + 1
        If cnt2 > UBound(tmp, 2) Then ReDim Preserve tmp(1 To 3, 1 To cnt2)
        tmp(1, cnt2) = colorKey
        tmp(2, cnt2) = bx
        tmp(3, cnt2) = r
NextRow:
    Next r
 
    If cnt2 = 0 Then BuildSectionTable_Block = Empty Else BuildSectionTable_Block = tmp
End Function
 
Private Function RowForInTable(tbl As Variant, ByVal colorKey As String, ByVal boxNum As Long) As Long
    If IsEmpty(tbl) Then Exit Function
    Dim i As Long
    For i = 1 To UBound(tbl, 2)
        If (colorKey = "ALL" Or CStr(tbl(1, i)) = colorKey) And CLng(tbl(2, i)) = boxNum Then
            RowForInTable = CLng(tbl(3, i))
            Exit Function
        End If
    Next i
End Function
 
Private Function RowForInTable_AnyColor(tbl As Variant, ByVal boxNum As Long) As Long
    If IsEmpty(tbl) Then Exit Function
    Dim i As Long
    For i = 1 To UBound(tbl, 2)
        If CLng(tbl(2, i)) = boxNum Then
            RowForInTable_AnyColor = CLng(tbl(3, i))
            Exit Function
        End If
    Next i
End Function
 
Private Function IsLikelyColor(ByVal v As Variant) As Boolean
    Dim s As String: s = Trim$(CStr(v))
    If Len(s) = 0 Then Exit Function
    If IsNumeric(s) Then Exit Function
    On Error Resume Next
    If IsDate(s) Then Exit Function
    On Error GoTo 0
    Dim i As Long, ch As String
    For i = 1 To Len(s)
        ch = Mid$(s, i, 1)
        If ch Like "[A-Za-z]" Then IsLikelyColor = True: Exit Function
    Next i
End Function
 
Private Function ParseBoxNum(ByVal s As String) As Long
    Dim U As String: U = UCase$(s)
    Dim p As Long: p = InStr(1, U, "BOX")
    If p = 0 Then Exit Function
    Dim i As Long, ch As String, numStr As String
    For i = p + 3 To Len(U)
        ch = Mid$(U, i, 1)
        If ch = " " Or ch = "-" Or ch = ChrW(8211) Or ch = ChrW(8212) Or ch = ChrW(160) Then
        ElseIf ch Like "#" Then
            numStr = numStr & ch
        ElseIf Len(numStr) > 0 Then
            Exit For
        End If
    Next i
    If Len(numStr) > 0 Then ParseBoxNum = CLng(numStr)
End Function
 
' ==== Single-group gating + add-ons ====
Private Sub AllowedBoxesForDC_Single(ws As Worksheet, gateTbl As Variant, ByVal key As String, ByVal colIdx As Long, ByRef coreGrp As Variant, ByRef passCore As Boolean, ByRef reason As String, ByRef allowed() As Boolean)
    Dim b As Long, iCore As Long, ao As Variant
    ReDim allowed(1 To MAX_BOX)
    For iCore = 1 To MAX_BOX: allowed(iCore) = False: Next iCore
 
    passCore = SectionAvailable_Table(ws, gateTbl, key, colIdx, coreGrp, reason)
 
    If passCore Then
        For iCore = LBound(coreGrp) To UBound(coreGrp)
            b = CLng(coreGrp(iCore))
            If b >= 1 And b <= MAX_BOX Then allowed(b) = True
        Next iCore
        For Each ao In AddOnBoxes()
            b = CLng(ao)
            If b >= 1 And b <= MAX_BOX Then allowed(b) = True
        Next ao
    End If
End Sub
 
Private Function SectionAvailable_Table(ws As Worksheet, gateTbl As Variant, ByVal colorKey As String, ByVal colIdx As Long, ByRef grp As Variant, ByRef reason As String) As Boolean
    reason = ""
    If IsEmpty(gateTbl) Then reason = "Gate section not found": Exit Function
 
    Dim hasAny As Boolean, k As Long, b As Long, r As Long, v As Double
    For k = LBound(grp) To UBound(grp)
        b = CLng(grp(k))
        r = RowForInTable(gateTbl, colorKey, b)
        If r = 0 Then
            If IGNORE_MISSING_BOX_ROWS Then
                ' skip
            Else
                reason = "Missing box " & b & " row"
                Exit Function
            End If
        Else
            hasAny = True
            v = ValD(ws.Cells(r, colIdx).Value)
            If v < EPS_NEG Then
                reason = "Box " & b & " < 0 at " & ws.Name & "!" & ws.Cells(r, colIdx).Address(False, False)
                Exit Function
            End If
        End If
    Next k
 
    If Not hasAny Then reason = "No boxes from group found": Exit Function
    SectionAvailable_Table = True
End Function
 
Private Function ValD(ByVal v As Variant) As Double
    On Error GoTo fail
    If Not IsError(v) And Not IsNull(v) Then If IsNumeric(v) Then ValD = CDbl(v): Exit Function
    Dim s As String: s = CStr(v)
    s = Replace(s, Chr$(160), " ")
    On Error Resume Next: s = Replace(s, ChrW$(160), " "): On Error GoTo 0
    s = Replace(s, ",", "")
    s = Trim$(s)
    If Len(s) = 0 Then Exit Function
    s = Replace(s, ChrW$(8722), "-"): s = Replace(s, ChrW$(8211), "-")
    s = Replace(s, ChrW$(8212), "-"): s = Replace(s, ChrW$(8210), "-")
    If Left$(s, 1) = "(" And Right$(s, 1) = ")" Then s = "-" & Mid$(s, 2, Len(s) - 2)
    s = Replace(s, "$", ""): s = Replace(s, " ", "")
    If Right$(s, 1) = "%" Then s = Left$(s, Len(s) - 1)
    If IsNumeric(s) Then ValD = CDbl(s)
    Exit Function
fail: ValD = 0#
End Function
 
Private Function TryReadDate(ByVal v As Variant, ByRef d As Date) As Boolean
    On Error GoTo nope
    If IsDate(v) Then d = CDate(v): TryReadDate = True: Exit Function
    If IsNumeric(v) Then If v > 30000 And v < 60000 Then d = DateSerial(1899, 12, 30) + CDbl(v): TryReadDate = True: Exit Function
    Dim s As String: s = Trim$(CStr(v))
    s = Replace(Replace(Replace(s, ".", "-"), "/", "-"), ChrW$(8722), "-")
    If IsDate(s) Then d = CDate(s): TryReadDate = True: Exit Function
nope:
End Function
 
Private Function TryDateForKey(ByVal v As Variant) As Date
    Dim d As Date
    If TryReadDate(v, d) Then TryDateForKey = d Else TryDateForKey = 0
End Function
 
Private Function GetArrayBounds(ByVal arr As Variant, ByRef lb As Long, ByRef ub As Long) As Boolean
    On Error Resume Next
    lb = LBound(arr): ub = UBound(arr)
    GetArrayBounds = (Err.Number = 0 And ub >= lb)
    Err.Clear
    On Error GoTo 0
End Function
 
Private Function UnionColors(ParamArray tbls() As Variant) As Collection
    Dim c As Collection: Set c = New Collection
    Dim t As Variant, i As Long, clr As String
    For Each t In tbls
        If Not IsEmpty(t) Then
            For i = 1 To UBound(t, 2)
                clr = CStr(t(1, i))
                If Len(clr) > 0 Then
                    On Error Resume Next
                    c.Add clr, clr
                    On Error GoTo 0
                End If
            Next i
        End If
    Next t
    Set UnionColors = c
End Function
'============================================================
